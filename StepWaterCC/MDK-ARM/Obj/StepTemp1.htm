<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\StepTemp1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\StepTemp1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Tue Mar 08 11:05:33 2016
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c2e92c]">OS_CPU_SR_Save</a>
 <LI><a href="#[c2e968]">OS_CPU_SR_Restore</a>
 <LI><a href="#[17e36d0]">OSStartHighRdy</a>
 <LI><a href="#[17e3694]">OSCtxSw</a>
 <LI><a href="#[17e3658]">OSIntCtxSw</a>
 <LI><a href="#[17e361c]">PendSV_Handler</a>
 <LI><a href="#[c2fa84]">CPU_IntDis</a>
 <LI><a href="#[189d3d4]">CPU_IntEn</a>
 <LI><a href="#[1681b38]">CPU_SR_Save</a>
 <LI><a href="#[1681b74]">CPU_SR_Restore</a>
 <LI><a href="#[189d398]">CPU_CntLeadZeros</a>
 <LI><a href="#[189d500]">CPU_RevBits</a>
 <LI><a href="#[189d35c]">CPU_WaitForInt</a>
 <LI><a href="#[189d320]">CPU_WaitForExcept</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[182c4ec]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[182c4ec]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[182c744]">Reset_Handler</a>
 <LI><a href="#[c2aed0]">NMI_Handler</a>
 <LI><a href="#[c2af48]">HardFault_Handler</a>
 <LI><a href="#[c2af0c]">MemManage_Handler</a>
 <LI><a href="#[c2afc0]">BusFault_Handler</a>
 <LI><a href="#[c2acb4]">UsageFault_Handler</a>
 <LI><a href="#[c2ae94]">SVC_Handler</a>
 <LI><a href="#[c2af84]">DebugMon_Handler</a>
 <LI><a href="#[17e361c]">PendSV_Handler</a>
 <LI><a href="#[c2ae58]">SysTick_Handler</a>
 <LI><a href="#[182bc40]">WWDG_IRQHandler</a>
 <LI><a href="#[182c03c]">PVD_IRQHandler</a>
 <LI><a href="#[182bf10]">TAMPER_IRQHandler</a>
 <LI><a href="#[182bf88]">RTC_IRQHandler</a>
 <LI><a href="#[182c0f0]">FLASH_IRQHandler</a>
 <LI><a href="#[182c000]">RCC_IRQHandler</a>
 <LI><a href="#[182c294]">EXTI0_IRQHandler</a>
 <LI><a href="#[182c21c]">EXTI1_IRQHandler</a>
 <LI><a href="#[182c1e0]">EXTI2_IRQHandler</a>
 <LI><a href="#[182c1a4]">EXTI3_IRQHandler</a>
 <LI><a href="#[182c168]">EXTI4_IRQHandler</a>
 <LI><a href="#[182c438]">DMA1_Channel1_IRQHandler</a>
 <LI><a href="#[182c3fc]">DMA1_Channel2_IRQHandler</a>
 <LI><a href="#[182c3c0]">DMA1_Channel3_IRQHandler</a>
 <LI><a href="#[182c384]">DMA1_Channel4_IRQHandler</a>
 <LI><a href="#[182c348]">DMA1_Channel5_IRQHandler</a>
 <LI><a href="#[182c30c]">DMA1_Channel6_IRQHandler</a>
 <LI><a href="#[182c2d0]">DMA1_Channel7_IRQHandler</a>
 <LI><a href="#[182c4ec]">ADC1_2_IRQHandler</a>
 <LI><a href="#[182bcb8]">USB_HP_CAN1_TX_IRQHandler</a>
 <LI><a href="#[182bc7c]">USB_LP_CAN1_RX0_IRQHandler</a>
 <LI><a href="#[182c4b0]">CAN1_RX1_IRQHandler</a>
 <LI><a href="#[182c474]">CAN1_SCE_IRQHandler</a>
 <LI><a href="#[182c12c]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[182bed4]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[182be20]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[182be5c]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[182be98]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[182bde4]">TIM2_IRQHandler</a>
 <LI><a href="#[c2ae1c]">TIM3_IRQHandler</a>
 <LI><a href="#[182c078]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[182c0b4]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[182bf4c]">SPI1_IRQHandler</a>
 <LI><a href="#[c2ad68]">USART1_IRQHandler</a>
 <LI><a href="#[c2ad2c]">USART2_IRQHandler</a>
 <LI><a href="#[182c258]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[182bfc4]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[182bcf4]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[c2fafc]">main</a>
 <LI><a href="#[182cb04]">SystemInit</a>
 <LI><a href="#[189abc0]">__main</a>
 <LI><a href="#[1829030]">OSTaskSwHook</a>
 <LI><a href="#[c29ea4]">uctsk_Blink</a>
 <LI><a href="#[c29ee0]">MyTASK</a>
 <LI><a href="#[c29ae4]">TaskRecv</a>
 <LI><a href="#[c29c4c]">TaskAA</a>
 <LI><a href="#[c29b5c]">TaskKey</a>
 <LI><a href="#[c29bd4]">TaskInput1</a>
 <LI><a href="#[c29c10]">TaskExample</a>
 <LI><a href="#[c29b98]">TaskInput2</a>
 <LI><a href="#[c29aa8]">TaskSensor</a>
 <LI><a href="#[c29a30]">TaskTimeOut5</a>
 <LI><a href="#[c29b20]">TaskOut6</a>
 <LI><a href="#[c29a6c]">TaskStatus</a>
 <LI><a href="#[17d5828]">OSTmr_Task</a>
 <LI><a href="#[17df4b8]">OS_TaskIdle</a>
 <LI><a href="#[17df47c]">OS_TaskStat</a>
 <LI><a href="#[c32388]">App_TaskStart</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[189abc0]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(.text)
</UL>
<P><STRONG><a name="[189a878]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[189a74c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[189a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[189a710]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[189a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[189a620]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[182c744]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c4ec]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[182c4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[182c4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c4b0]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c474]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c438]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c3fc]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c3c0]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c384]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c348]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c30c]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c2d0]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c294]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c258]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c21c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c1e0]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c1a4]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c168]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c12c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c0f0]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c0b4]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c078]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c03c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182c000]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182bfc4]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182bf88]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182bf4c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182bf10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182bed4]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182be98]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182be5c]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182be20]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182bde4]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182bcf4]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182bcb8]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182bc7c]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182bc40]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[c2e92c]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2622c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c26268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c29c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c29d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c2ab88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c2ac00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c2ae58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c2ea94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[c2ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1BufInit
<LI><a href="#[c2eb84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneFromUart1
<LI><a href="#[c2f868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c2f8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[c2f8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[17df3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[17df404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[17df47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[17df4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[17df4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[17df56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[17df800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[17df83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[17df8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[c2e968]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2622c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c26268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c29c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c29d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c2ab88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c2ac00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c2ae58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c2ea94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[c2ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1BufInit
<LI><a href="#[c2eb84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneFromUart1
<LI><a href="#[c2f868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c2f8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[c2f8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[17df3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[17df404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[17df47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[17df4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[17df4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[17df56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[17df800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[17df83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[17df8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[17e36d0]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2f91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[17e3694]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17df56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[17e3658]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2ac00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[17e361c]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[c2fa84]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2fafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[189d3d4]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1681b38]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[1681b74]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[189d398]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[189d500]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[189d35c]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[189d320]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[189a4f4]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[189a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[189a74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[189a4b8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c25764]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c26394]"></a>ADC_Configuration</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, adc.o(i.ADC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_Configuration &rArr; GPIO_Configuration_Adc &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c25494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c254d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[c2550c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c25548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[c25584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[c255c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[c255fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[c25638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[c25674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[c256b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[c256ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[c25728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[c25764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[c257a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_Adc
<LI><a href="#[c257dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_Adc
</UL>
<BR>[Called By]<UL><LI><a href="#[c29c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskExample
</UL>

<P><STRONG><a name="[c25728]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c256ec]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c256b0]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c25674]"></a>ADC_Init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c25638]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c255fc]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c255c0]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c25584]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c25548]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_TempSensorVrefintCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c26358]"></a>AdcFilter</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, adc.o(i.AdcFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdcFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[c26790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecvUser
</UL>

<P><STRONG><a name="[c2ea58]"></a>AddLoopBuf</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, loopbuf.o(i.AddLoopBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AddLoopBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[c2ea94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
</UL>

<P><STRONG><a name="[c2fac0]"></a>App_BlinkTaskCreate</STRONG> (Thumb, 536 bytes, Stack size 32 bytes, soft.o(i.App_BlinkTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = App_BlinkTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c29c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c29d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c2f868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c2f8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c323c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreate
</UL>

<P><STRONG><a name="[17e39a0]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[1829198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[17e3964]"></a>App_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[182915c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[17e38ec]"></a>App_TaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[18290e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[17e38b0]"></a>App_TaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[18290a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[17e3874]"></a>App_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskSwHook))
<BR><BR>[Called By]<UL><LI><a href="#[1829030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[17e3838]"></a>App_TimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[17e3a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[c2d090]"></a>AscToHex</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nomal.o(i.AscToHex))
<BR><BR>[Called By]<UL><LI><a href="#[c26844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberHexStringToInt32
<LI><a href="#[c2cdc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberAscStringToInt16
</UL>

<P><STRONG><a name="[c2afc0]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[c2ea1c]"></a>ClearLoopBuf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loopbuf.o(i.ClearLoopBuf))
<BR><BR>[Called By]<UL><LI><a href="#[c2ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1BufInit
</UL>

<P><STRONG><a name="[c2550c]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c254d0]"></a>DMA_DeInit</STRONG> (Thumb, 336 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c25494]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c2af84]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[c257dc]"></a>GPIO_Configuration_Adc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc.o(i.GPIO_Configuration_Adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Configuration_Adc &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c25458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c25458]"></a>GPIO_Init</STRONG> (Thumb, 268 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c257dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_Adc
<LI><a href="#[c2fa48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpio
</UL>

<P><STRONG><a name="[c262e0]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[c29b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskInput2
<LI><a href="#[c29bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskInput1
</UL>

<P><STRONG><a name="[c262a4]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[c29aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSensor
<LI><a href="#[c29b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKey
</UL>

<P><STRONG><a name="[c2ac78]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[c2640c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStop2
<LI><a href="#[c26448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStop1
<LI><a href="#[c26484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStart2
<LI><a href="#[c264c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStart1
<LI><a href="#[c26538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun1
<LI><a href="#[c29a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStatus
<LI><a href="#[c29aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSensor
<LI><a href="#[c2ae1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[c2f7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotInit
</UL>

<P><STRONG><a name="[c2ac3c]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[c26484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStart2
<LI><a href="#[c264c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStart1
<LI><a href="#[c26538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun1
<LI><a href="#[c29a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStatus
<LI><a href="#[c29aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSensor
<LI><a href="#[c2ae1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[c2e9e0]"></a>GetLoopbuf</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, loopbuf.o(i.GetLoopbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetLoopbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[c2ea94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[c2eb84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneFromUart1
</UL>

<P><STRONG><a name="[c2eb84]"></a>GetOneFromUart1</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart.o(i.GetOneFromUart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = GetOneFromUart1 &rArr; GetLoopbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c2e9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoopbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c29ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecv
</UL>

<P><STRONG><a name="[c2af48]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[c2cf64]"></a>HexToAsc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nomal.o(i.HexToAsc))
<BR><BR>[Called By]<UL><LI><a href="#[c26790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecvUser
<LI><a href="#[c2ce74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeValAsc16
</UL>

<P><STRONG><a name="[c2fa48]"></a>InitGpio</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, hd_prt3201.o(i.InitGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = InitGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c253a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c25458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c32388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c2fa0c]"></a>InitUSART1</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, hd_prt3201.o(i.InitUSART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = InitUSART1 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c253a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c2e8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c2ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1BufInit
<LI><a href="#[16818e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1681958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1681afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1681bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TxIntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[c32388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c2f9d0]"></a>Init_Tim3</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, hd_prt3201.o(i.Init_Tim3))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_Tim3 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16819d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1681a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[1681a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1681a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1681ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1681afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c32388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c2cf28]"></a>IsHexAsc</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, nomal.o(i.IsHexAsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsHexAsc
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ceec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNumberAsc
</UL>
<BR>[Called By]<UL><LI><a href="#[c26844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberHexStringToInt32
</UL>

<P><STRONG><a name="[c2ceec]"></a>IsNumberAsc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nomal.o(i.IsNumberAsc))
<BR><BR>[Called By]<UL><LI><a href="#[c2cdc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberAscStringToInt16
<LI><a href="#[c2cf28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHexAsc
</UL>

<P><STRONG><a name="[c2ce74]"></a>MakeValAsc16</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, nomal.o(i.MakeValAsc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MakeValAsc16 &rArr; PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[c2cd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[c2cf64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToAsc
</UL>
<BR>[Called By]<UL><LI><a href="#[c26664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponeTempratur
<LI><a href="#[c266a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponePower
</UL>

<P><STRONG><a name="[c2af0c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[c2aed0]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1681afc]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
<LI><a href="#[c2fa0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
</UL>

<P><STRONG><a name="[c2f994]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c32388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c2cdc0]"></a>NumberAscStringToInt16</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nomal.o(i.NumberAscStringToInt16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NumberAscStringToInt16
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ceec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNumberAsc
<LI><a href="#[c2d090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AscToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[c26718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceivedPowerOut
</UL>

<P><STRONG><a name="[c26844]"></a>NumberHexStringToInt32</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, user.o(i.NumberHexStringToInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NumberHexStringToInt32 &rArr; IsHexAsc
</UL>
<BR>[Calls]<UL><LI><a href="#[c2cf28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHexAsc
<LI><a href="#[c2d090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AscToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[c26790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecvUser
</UL>

<P><STRONG><a name="[182aae8]"></a>OSDebugInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_dbg.o(i.OSDebugInit))
<BR><BR>[Called By]<UL><LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17df8f0]"></a>OSEventNameSet</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_core.o(i.OSEventNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[17df38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[c2f958]"></a>OSInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[17df2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[17df314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[17df350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[17df38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[17e037c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[17e03b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[17e03f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[17e0430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[17e046c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[17e04a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[18291d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[1829210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[182aae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1829210]"></a>OSInitHookBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[18291d4]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c2ac00]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17e0340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[17e3658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[c2aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[c2ae58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[17df83c]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[17d5828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[17df800]"></a>OSSchedUnlock</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17df56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[17d5828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[c29d00]"></a>OSSemCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17df620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
<LI><a href="#[17df38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[c26268]"></a>OSSemPend</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17df56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[17df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[17df710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c26664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponeTempratur
<LI><a href="#[c266a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponePower
<LI><a href="#[c26790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecvUser
<LI><a href="#[c29ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecv
<LI><a href="#[17d5828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[c2622c]"></a>OSSemPost</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17df56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[17df74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[c26664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponeTempratur
<LI><a href="#[c266a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponePower
<LI><a href="#[c26790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecvUser
<LI><a href="#[c29ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecv
<LI><a href="#[17e37fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[c2f91c]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[17e0340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[17e36d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2f8e0]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(i.OSStatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[c32388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[1829198]"></a>OSTCBInitHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[17e39a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[17df4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[c29c88]"></a>OSTaskCreate</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17df4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[17df56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[182906c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
</UL>

<P><STRONG><a name="[c2f8a4]"></a>OSTaskCreateExt</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17d77cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[17df4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[17df56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[182906c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
<LI><a href="#[c2fafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17d58a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[17e037c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[17e03b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[182915c]"></a>OSTaskCreateHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[17e3964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[17df4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[18290e4]"></a>OSTaskIdleHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[17e38ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[17df4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[c2f868]"></a>OSTaskNameSet</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
<LI><a href="#[c2fafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17d58a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[17e037c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[17e03b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[18290a8]"></a>OSTaskStatHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStatHook
</UL>
<BR>[Calls]<UL><LI><a href="#[17e38b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[17df47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[17df404]"></a>OSTaskStkChk</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[17df440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[182906c]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c29c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c2f8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[17df3c8]"></a>OSTaskSuspend</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17df56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[17df47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1829030]"></a>OSTaskSwHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[17e3874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[c2e9a4]"></a>OSTimeDly</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17df56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[c26484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStart2
<LI><a href="#[c264c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStart1
<LI><a href="#[c26538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun1
<LI><a href="#[c29a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTimeOut5
<LI><a href="#[c29a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStatus
<LI><a href="#[c29aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSensor
<LI><a href="#[c29ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecv
<LI><a href="#[c29b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskOut6
<LI><a href="#[c29b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKey
<LI><a href="#[c29b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskInput2
<LI><a href="#[c29bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskInput1
<LI><a href="#[c29c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskExample
<LI><a href="#[c29c4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskAA
<LI><a href="#[c2ea94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[c2f82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[c2f8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[17df47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[c2f82c]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[c29ea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Blink
<LI><a href="#[c29ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTASK
<LI><a href="#[c32388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c2ab88]"></a>OSTimeTick</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17e3a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c2ae58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[17e3a54]"></a>OSTimeTickHook</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[17e37fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
<LI><a href="#[17e3838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c2ab88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[17e37fc]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmrSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c2622c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[17e3a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[17df38c]"></a>OSTmr_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, os_tmr.o(i.OSTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c29d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[17d58a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[17df5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[17df8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c2f7f0]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, os_cpu_c.o(i.OS_CPU_SysTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[c32388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[17df74c]"></a>OS_EventTaskRdy</STRONG> (Thumb, 150 bytes, Stack size 36 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[17df6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[17df710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c2622c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[17df710]"></a>OS_EventTaskRemove</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c26268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[17df74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[17df6d4]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, os_core.o(i.OS_EventTaskRemoveMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[17df74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[17df698]"></a>OS_EventTaskWait</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[c26268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[17df620]"></a>OS_EventWaitListInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[c29d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[17df350]"></a>OS_FlagInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17df5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17df5e4]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[17df2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[17df314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[17df350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[17df38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[17e03f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[17e04a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[17df314]"></a>OS_MemInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17df5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17df2d8]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17df5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17df56c]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17e0340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[17e3694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[c2622c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c26268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c29c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c2f8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[17df3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[17df800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[17df4f4]"></a>OS_TCBInit</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[182915c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[1829198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c29c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c2f8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[17df4b8]"></a>OS_TaskIdle</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_TaskIdle &rArr; OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18290e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[17df47c]"></a>OS_TaskStat</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[17df3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[17df440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[18290a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[17df440]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[17df404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[17df47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[17d77cc]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[c2f8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[c26808]"></a>ProcessInput1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, user.o(i.ProcessInput1))
<BR><BR>[Called By]<UL><LI><a href="#[c29bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskInput1
</UL>

<P><STRONG><a name="[c267cc]"></a>ProcessKey</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, user.o(i.ProcessKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ProcessKey &rArr; StepMotStart2 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2640c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStop2
<LI><a href="#[c26448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStop1
<LI><a href="#[c26484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStart2
<LI><a href="#[c264c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStart1
</UL>
<BR>[Called By]<UL><LI><a href="#[c29b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKey
</UL>

<P><STRONG><a name="[c26790]"></a>ProcessRecvUser</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, user.o(i.ProcessRecvUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ProcessRecvUser &rArr; ResponeTempratur &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c2622c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c26268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c26358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcFilter
<LI><a href="#[c26664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponeTempratur
<LI><a href="#[c266a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponePower
<LI><a href="#[c26718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceivedPowerOut
<LI><a href="#[c26844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberHexStringToInt32
<LI><a href="#[c2cf64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToAsc
<LI><a href="#[c2ea94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[c2eb0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendText_UART1
</UL>
<BR>[Called By]<UL><LI><a href="#[c266dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvFromUser
</UL>

<P><STRONG><a name="[c26754]"></a>ProcessSenSor1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user.o(i.ProcessSenSor1))
<BR><BR>[Called By]<UL><LI><a href="#[c29aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSensor
</UL>

<P><STRONG><a name="[c2cd48]"></a>PutString</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, nomal.o(i.PutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[c26664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponeTempratur
<LI><a href="#[c266a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponePower
<LI><a href="#[c2ce74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeValAsc16
</UL>

<P><STRONG><a name="[c2541c]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c257a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_Adc
</UL>

<P><STRONG><a name="[c253e0]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c257a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_Adc
</UL>

<P><STRONG><a name="[1681ac0]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2f9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[c253a4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c257a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_Adc
<LI><a href="#[c2fa0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
<LI><a href="#[c2fa48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpio
</UL>

<P><STRONG><a name="[c257a0]"></a>RCC_Configuration_Adc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adc.o(i.RCC_Configuration_Adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration_Adc
</UL>
<BR>[Calls]<UL><LI><a href="#[c253a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c253e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c2541c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[1678e20]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16818e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[c26718]"></a>ReceivedPowerOut</STRONG> (Thumb, 212 bytes, Stack size 88 bytes, user.o(i.ReceivedPowerOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ReceivedPowerOut &rArr; StepMotRun1 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c26538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun1
<LI><a href="#[c2cdc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberAscStringToInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[c26790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecvUser
</UL>

<P><STRONG><a name="[c266dc]"></a>RecvFromUser</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, user.o(i.RecvFromUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = RecvFromUser &rArr; ProcessRecvUser &rArr; ResponeTempratur &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c26790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecvUser
</UL>
<BR>[Called By]<UL><LI><a href="#[c29ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecv
</UL>

<P><STRONG><a name="[c266a0]"></a>ResponePower</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, user.o(i.ResponePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ResponePower &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c2622c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c26268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c2cd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[c2ce74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeValAsc16
<LI><a href="#[c2eb0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendText_UART1
</UL>
<BR>[Called By]<UL><LI><a href="#[c26790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecvUser
</UL>

<P><STRONG><a name="[c26664]"></a>ResponeTempratur</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, user.o(i.ResponeTempratur))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ResponeTempratur &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c2622c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c26268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c2cd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[c2ce74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeValAsc16
<LI><a href="#[c2eb0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendText_UART1
</UL>
<BR>[Called By]<UL><LI><a href="#[c26790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecvUser
</UL>

<P><STRONG><a name="[c2ae94]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[c2eb0c]"></a>SendText_UART1</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart.o(i.SendText_UART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SendText_UART1 &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ea94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c26664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponeTempratur
<LI><a href="#[c266a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResponePower
<LI><a href="#[c26790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecvUser
</UL>

<P><STRONG><a name="[c2f7b4]"></a>StepMotInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, user.o(i.StepMotInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ac78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c32388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c26538]"></a>StepMotRun1</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, user.o(i.StepMotRun1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = StepMotRun1 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ac3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c2ac78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[c26718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceivedPowerOut
</UL>

<P><STRONG><a name="[c264c0]"></a>StepMotStart1</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, user.o(i.StepMotStart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = StepMotStart1 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ac3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c2ac78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[c267cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[c29ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecv
</UL>

<P><STRONG><a name="[c26484]"></a>StepMotStart2</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, user.o(i.StepMotStart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = StepMotStart2 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ac3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c2ac78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[c267cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[c29ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecv
</UL>

<P><STRONG><a name="[c26448]"></a>StepMotStop1</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, user.o(i.StepMotStop1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotStop1
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ac78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c267cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>

<P><STRONG><a name="[c2640c]"></a>StepMotStop2</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, user.o(i.StepMotStop2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ac78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c267cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>

<P><STRONG><a name="[c2ae58]"></a>SysTick_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ab88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c2ac00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[182cb04]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[182ce10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(.text)
</UL>
<P><STRONG><a name="[c2ae1c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c2aa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[c2aad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[c2ac3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c2ac78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[c2aad4]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[c2ae1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1681a84]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2f9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[c2aa98]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c2ae1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1681a48]"></a>TIM_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[1681a0c]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[c2f9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[16819d0]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[c2f9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[c29c4c]"></a>TaskAA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, user.o(i.TaskAA))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TaskAA &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[c29c10]"></a>TaskExample</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user.o(i.TaskExample))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = TaskExample &rArr; ADC_Configuration &rArr; GPIO_Configuration_Adc &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c26394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[c29bd4]"></a>TaskInput1</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, user.o(i.TaskInput1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = TaskInput1 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c262e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[c26808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessInput1
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[c29b98]"></a>TaskInput2</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, user.o(i.TaskInput2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = TaskInput2 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c262e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[c29b5c]"></a>TaskKey</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, user.o(i.TaskKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TaskKey &rArr; ProcessKey &rArr; StepMotStart2 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c262a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c267cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[c29b20]"></a>TaskOut6</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, user.o(i.TaskOut6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TaskOut6 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[c29ae4]"></a>TaskRecv</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, user.o(i.TaskRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = TaskRecv &rArr; RecvFromUser &rArr; ProcessRecvUser &rArr; ResponeTempratur &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c2622c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c26268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c26484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStart2
<LI><a href="#[c264c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStart1
<LI><a href="#[c266dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvFromUser
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c2eb84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneFromUart1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[c29aa8]"></a>TaskSensor</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, user.o(i.TaskSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = TaskSensor &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c262a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c26754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSenSor1
<LI><a href="#[c2ac3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c2ac78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[c29a6c]"></a>TaskStatus</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, user.o(i.TaskStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = TaskStatus &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ac3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c2ac78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[c29a30]"></a>TaskTimeOut5</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, user.o(i.TaskTimeOut5))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = TaskTimeOut5 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[c2ad68]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; USART1_RxTxISRHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c2aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[c2aa5c]"></a>USART1_RxTxISRHandler</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, hd_prt3201.o(i.USART1_RxTxISRHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = USART1_RxTxISRHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ac00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c2e8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[c2e8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c2e9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoopbuf
<LI><a href="#[c2ea58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLoopBuf
<LI><a href="#[16818a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[168191c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1681994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1681b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1681b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2ad68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1681bb0]"></a>USART1_TxIntEn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hd_prt3201.o(i.USART1_TxIntEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_TxIntEn &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fa0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
</UL>

<P><STRONG><a name="[c2ad2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1681994]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[1681958]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2fa0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
</UL>

<P><STRONG><a name="[168191c]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c2aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[c2e8f0]"></a>USART_ITConfig</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c2aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[c2ea94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[c2fa0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
<LI><a href="#[1681bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TxIntEn
</UL>

<P><STRONG><a name="[16818e0]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1678e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fa0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
</UL>

<P><STRONG><a name="[16818a4]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[c2aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[c2e8b4]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[c2aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[c2ea94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
</UL>

<P><STRONG><a name="[c2ead0]"></a>Uart1BufInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart.o(i.Uart1BufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Uart1BufInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c2ea1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLoopBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fa0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
</UL>

<P><STRONG><a name="[c2ea94]"></a>Uart1CharSend</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, uart.o(i.Uart1CharSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2e8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[c2e8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c2e92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c2e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c2e9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c2e9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoopbuf
<LI><a href="#[c2ea58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLoopBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c26790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecvUser
<LI><a href="#[c2eb0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendText_UART1
</UL>

<P><STRONG><a name="[c2acb4]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[189a134]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[189a0f8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[189a0bc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c2fafc]"></a>main</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c2f8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[c2f91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[c2fa84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c323c4]"></a>App_TaskCreate</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.App_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = App_TaskCreate &rArr; App_BlinkTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2fac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c32388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c32388]"></a>App_TaskStart</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i.App_TaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = App_TaskStart &rArr; App_TaskCreate &rArr; App_BlinkTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotInit
<LI><a href="#[c2f7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[c2f82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[c2f8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[c2f994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[c2f9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
<LI><a href="#[c2fa0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
<LI><a href="#[c2fa48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpio
<LI><a href="#[c3234c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[c323c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c3234c]"></a>GPIO_Configuration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.GPIO_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[c32388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c29ee0]"></a>MyTASK</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, soft.o(i.MyTASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = MyTASK &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[c29ea4]"></a>uctsk_Blink</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, soft.o(i.uctsk_Blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = uctsk_Blink &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[182ce10]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[182cdd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[182cb04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[182cdd4]"></a>SetSysClockTo72</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Called By]<UL><LI><a href="#[182ce10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[17e04a8]"></a>OS_InitEventList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[17df5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17e046c]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17e0430]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17e03f4]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[17df5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17e03b8]"></a>OS_InitTaskIdle</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c2f8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17e037c]"></a>OS_InitTaskStat</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c2f8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17e0340]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[c2ac00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c2f91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[17df56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[17d58a0]"></a>OSTmr_InitTask</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, os_tmr.o(i.OSTmr_InitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c2f8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[17df38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[17d5864]"></a>OSTmr_Link</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, os_tmr.o(i.OSTmr_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[17d5828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[17d5828]"></a>OSTmr_Task</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, os_tmr.o(i.OSTmr_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c26268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[17d57ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[17d5864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[17df800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[17df83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OSTmr_InitTask)
</UL>
<P><STRONG><a name="[17d57ec]"></a>OSTmr_Unlink</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_tmr.o(i.OSTmr_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[17d5828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

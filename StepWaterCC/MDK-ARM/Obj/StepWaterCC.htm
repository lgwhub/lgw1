<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\StepWaterCC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\StepWaterCC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Sat Jan 21 17:10:38 2017
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TaskTs &rArr; CHECK_AD590OneTCCheckUseADS8328 &rArr; ADS8328_DataConvert &rArr; ADS8328_ReadWord
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a7]">OS_CPU_SR_Save</a>
 <LI><a href="#[a8]">OS_CPU_SR_Restore</a>
 <LI><a href="#[c2]">OSStartHighRdy</a>
 <LI><a href="#[da]">OSCtxSw</a>
 <LI><a href="#[b9]">OSIntCtxSw</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[ff]">CPU_IntDis</a>
 <LI><a href="#[108]">CPU_IntEn</a>
 <LI><a href="#[f3]">CPU_SR_Save</a>
 <LI><a href="#[f4]">CPU_SR_Restore</a>
 <LI><a href="#[109]">CPU_CntLeadZeros</a>
 <LI><a href="#[10a]">CPU_RevBits</a>
 <LI><a href="#[10b]">CPU_WaitForInt</a>
 <LI><a href="#[10c]">CPU_WaitForExcept</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[43]">App_TaskStart</a> from main.o(i.App_TaskStart) referenced from main.o(i.main)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2d]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[29]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[28]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[35]">MyTASK</a> from soft.o(i.MyTASK) referenced from soft.o(i.App_BlinkTaskCreate)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[33]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[40]">OSTmr_Task</a> from os_tmr.o(i.OSTmr_Task) referenced from os_tmr.o(i.OSTmr_InitTask)
 <LI><a href="#[41]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[42]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2e]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_ld.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f10x_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[3e]">TaskHeat</a> from user.o(i.TaskHeat) referenced from soft.o(i.App_BlinkTaskCreate)
 <LI><a href="#[39]">TaskInput1</a> from user.o(i.TaskInput1) referenced from soft.o(i.App_BlinkTaskCreate)
 <LI><a href="#[38]">TaskKey</a> from user.o(i.TaskKey) referenced from soft.o(i.App_BlinkTaskCreate)
 <LI><a href="#[3b]">TaskModbus</a> from user.o(i.TaskModbus) referenced from soft.o(i.App_BlinkTaskCreate)
 <LI><a href="#[36]">TaskRecv</a> from user.o(i.TaskRecv) referenced from soft.o(i.App_BlinkTaskCreate)
 <LI><a href="#[3f]">TaskStatus</a> from user.o(i.TaskStatus) referenced from soft.o(i.App_BlinkTaskCreate)
 <LI><a href="#[3c]">TaskStepMotor</a> from user.o(i.TaskStepMotor) referenced from soft.o(i.App_BlinkTaskCreate)
 <LI><a href="#[3d]">TaskTimePr</a> from user.o(i.TaskTimePr) referenced from soft.o(i.App_BlinkTaskCreate)
 <LI><a href="#[37]">TaskTs</a> from user.o(i.TaskTs) referenced from soft.o(i.App_BlinkTaskCreate)
 <LI><a href="#[3a]">TaskVirPwm</a> from user.o(i.TaskVirPwm) referenced from soft.o(i.App_BlinkTaskCreate)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from stm32f10x_it.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2c]">USART2_IRQHandler</a> from stm32f10x_it.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2f]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[32]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_ld.o(.text)
 <LI><a href="#[30]">main</a> from main.o(i.main) referenced from entry8.o(.ARM.Collect$$$$00000009)
 <LI><a href="#[34]">uctsk_Blink</a> from soft.o(i.uctsk_Blink) referenced from soft.o(i.App_BlinkTaskCreate)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(.text)
</UL>
<P><STRONG><a name="[100]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[44]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[58]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[101]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[102]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[103]"></a>__get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[104]"></a>__set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[105]"></a>__get_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[8f]"></a>__set_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpAppAdr
</UL>

<P><STRONG><a name="[106]"></a>__REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[107]"></a>__REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1BufInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[a8]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1BufInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[c2]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[da]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[b9]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[f4]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[109]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_AD590OneTCCheckUseADS8328
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_fmul</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_AD590OneTCCheckUseADS8328
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Para_Refush
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_AD590OneTCCheckUseADS8328
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Para_Refush
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_dadd</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_dmul</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_AD590OneTCCheckUseADS8328
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_f2d</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Para_Refush
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[10d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[47]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[50]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4f]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[45]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[110]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[111]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>ADS8328_DataConvert</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ads8328.o(i.ADS8328_DataConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADS8328_DataConvert &rArr; ADS8328_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_AD590OneTCCheckUseADS8328
</UL>

<P><STRONG><a name="[5f]"></a>ADS8328_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ads8328.o(i.ADS8328_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADS8328_Init &rArr; ADS8328_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTs
</UL>

<P><STRONG><a name="[5e]"></a>ADS8328_ReadWord</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ads8328.o(i.ADS8328_ReadWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADS8328_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_DataConvert
</UL>

<P><STRONG><a name="[61]"></a>ADS8328_SelectChannel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ads8328.o(i.ADS8328_SelectChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADS8328_SelectChannel &rArr; ADS8328_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTs
</UL>

<P><STRONG><a name="[60]"></a>ADS8328_WriteWord</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ads8328.o(i.ADS8328_WriteWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADS8328_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_SelectChannel
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_Init
</UL>

<P><STRONG><a name="[f8]"></a>AddLoopBuf</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, loopbuf.o(i.AddLoopBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AddLoopBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
</UL>

<P><STRONG><a name="[62]"></a>App_BlinkTaskCreate</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, soft.o(i.App_BlinkTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = App_BlinkTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreate
</UL>

<P><STRONG><a name="[c4]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[c9]"></a>App_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[cb]"></a>App_TaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[cd]"></a>App_TaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[d0]"></a>App_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskSwHook))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[d3]"></a>App_TimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[8a]"></a>BKP_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_bkp.o(i.BKP_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
</UL>

<P><STRONG><a name="[8b]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_bkp.o(i.BKP_ReadBackupRegister))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
</UL>

<P><STRONG><a name="[8c]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(i.BKP_WriteBackupRegister))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkWrite
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CHECK_AD590OneTCCheckUseADS8328</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, user.o(i.CHECK_AD590OneTCCheckUseADS8328))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CHECK_AD590OneTCCheckUseADS8328 &rArr; ADS8328_DataConvert &rArr; ADS8328_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_DataConvert
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTs
</UL>

<P><STRONG><a name="[72]"></a>CHECK_SelectChannel</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, user.o(i.CHECK_SelectChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CHECK_SelectChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTs
</UL>

<P><STRONG><a name="[73]"></a>CheckAdrressKey</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, user.o(i.CheckAdrressKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckAdrressKey
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskModbus
</UL>

<P><STRONG><a name="[77]"></a>ClearLoopBuf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loopbuf.o(i.ClearLoopBuf))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1BufInit
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>Default_ParamInit</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, parameter.o(i.Default_ParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Default_ParamInit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLoopBuf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ParaInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_BufInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskModbus
</UL>

<P><STRONG><a name="[7b]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpio
</UL>

<P><STRONG><a name="[5c]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_DataConvert
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAdrressKey
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_ReadWord
</UL>

<P><STRONG><a name="[5a]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_DataConvert
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_SelectChannel
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMoterPulseHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStop2
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStop1
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun6
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun5
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun3
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun2
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun1
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_WriteWord
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_ReadWord
</UL>

<P><STRONG><a name="[5b]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_DataConvert
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_SelectChannel
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMoterPulseHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun6
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun5
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun3
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun2
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_WriteWord
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_ReadWord
</UL>

<P><STRONG><a name="[9b]"></a>GetCRC_Checksum4</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, modbusprocess.o(i.GetCRC_Checksum4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetCRC_Checksum4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendModbusPark
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRecvProcess
</UL>

<P><STRONG><a name="[fa]"></a>GetLoopbuf</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, loopbuf.o(i.GetLoopbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetLoopbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
</UL>

<P><STRONG><a name="[78]"></a>GetModbusPark</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, modbusrecv.o(i.GetModbusPark))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GetModbusPark &rArr; ModbusRecvProcess &rArr; _ModbusParameterProcess &rArr; ModbusWriteWord &rArr; _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRecvProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskModbus
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>InitGpio</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, hd_159.o(i.InitGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[6c]"></a>InitUSART1</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, hd_159.o(i.InitUSART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = InitUSART1 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1BufInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TxIntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[82]"></a>Init_Tim3</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, hd_159.o(i.Init_Tim3))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_Tim3 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotInit
</UL>

<P><STRONG><a name="[88]"></a>IspMarkLoad</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, jump.o(i.IspMarkLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IspMarkLoad &rArr; JumpAppAdr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ClearFlag
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpAppAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>IspMarkWrite</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jump.o(i.IspMarkWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IspMarkWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand1
</UL>

<P><STRONG><a name="[8d]"></a>JumpAppAdr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, jump.o(i.JumpAppAdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JumpAppAdr
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>ModbusCommand1</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, jump.o(i.ModbusCommand1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ModbusCommand1 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
</UL>

<P><STRONG><a name="[93]"></a>ModbusCommand2</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, user.o(i.ModbusCommand2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ModbusCommand2 &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
</UL>

<P><STRONG><a name="[ee]"></a>ModbusInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, modbusrecv.o(i.ModbusInit))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskModbus
</UL>

<P><STRONG><a name="[97]"></a>ModbusReadWord</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, modbusprocess.o(i.ModbusReadWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ModbusReadWord &rArr; _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendModbusPark
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakeReadRegRespone
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
</UL>

<P><STRONG><a name="[79]"></a>ModbusRecvProcess</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, modbusprocess.o(i.ModbusRecvProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ModbusRecvProcess &rArr; _ModbusParameterProcess &rArr; ModbusWriteWord &rArr; _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringUartx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC_Checksum4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModbusPark
</UL>

<P><STRONG><a name="[f7]"></a>ModbusRxISRHandler</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, modbusrecv.o(i.ModbusRxISRHandler))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[ef]"></a>ModbusTimeHandler</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, modbusrecv.o(i.ModbusTimeHandler))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskModbus
</UL>

<P><STRONG><a name="[9d]"></a>ModbusWriteWord</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, modbusprocess.o(i.ModbusWriteWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ModbusWriteWord &rArr; _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendModbusPark
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PlaceModbusFloat
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakeWriteRegRespone
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
</UL>

<P><STRONG><a name="[95]"></a>MotorsRun</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, user.o(i.MotorsRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MotorsRun &rArr; StepMotRun6
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun6
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun5
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun3
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun2
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun1
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand2
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[68]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[b6]"></a>OSDebugInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_dbg.o(i.OSDebugInit))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[a6]"></a>OSEventNameSet</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_core.o(i.OSEventNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[a9]"></a>OSInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>OSInitHookBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b5]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b7]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ba]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[bb]"></a>OSSchedUnlock</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[65]"></a>OSSemCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[94]"></a>OSSemPend</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand2
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeat
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[96]"></a>OSSemPost</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand2
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTimePr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[c1]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(i.OSStatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c3]"></a>OSTCBInitHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[63]"></a>OSTaskCreate</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
</UL>

<P><STRONG><a name="[66]"></a>OSTaskCreateExt</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[c8]"></a>OSTaskCreateHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[ca]"></a>OSTaskIdleHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[64]"></a>OSTaskNameSet</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[cc]"></a>OSTaskStatHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStatHook
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[ce]"></a>OSTaskStkChk</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[c5]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[cf]"></a>OSTaskSuspend</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[33]"></a>OSTaskSwHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>OSTimeDly</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskVirPwm
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTs
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTimePr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStatus
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecv
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskModbus
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKey
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskInput1
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeat
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand1
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[6f]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Blink
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTASK
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[d1]"></a>OSTimeTick</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d2]"></a>OSTimeTickHook</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[d4]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmrSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[b4]"></a>OSTmr_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, os_tmr.o(i.OSTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[6b]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, os_cpu_c.o(i.OS_CPU_SysTickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_CPU_SysTickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c0]"></a>OS_EventTaskRdy</STRONG> (Thumb, 138 bytes, Stack size 36 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[bf]"></a>OS_EventTaskRemove</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[d9]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, os_core.o(i.OS_EventTaskRemoveMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[be]"></a>OS_EventTaskWait</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[bd]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[af]"></a>OS_FlagInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d5]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[b0]"></a>OS_MemInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b1]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[bc]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[c6]"></a>OS_TCBInit</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[41]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_TaskIdle &rArr; OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[42]"></a>OS_TaskStat</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[db]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[c7]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[76]"></a>PID_BufInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pid.o(i.PID_BufInit))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
</UL>

<P><STRONG><a name="[dc]"></a>PID_Calc</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, pid.o(i.PID_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PID_Calc &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeat
</UL>

<P><STRONG><a name="[e0]"></a>PID_Inc_Calc</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, pid_inc.o(i.PID_Inc_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PID_Inc_Calc &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
</UL>

<P><STRONG><a name="[75]"></a>PID_ParaInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pid.o(i.PID_ParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PID_ParaInit &rArr; PID_Para_Refush_All &rArr; PID_Para_Refush &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Para_Refush_All
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
</UL>

<P><STRONG><a name="[e2]"></a>PID_Para_Refush</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, pid.o(i.PID_Para_Refush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PID_Para_Refush &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Para_Refush_All
</UL>

<P><STRONG><a name="[e1]"></a>PID_Para_Refush_All</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pid.o(i.PID_Para_Refush_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PID_Para_Refush_All &rArr; PID_Para_Refush &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Para_Refush
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ParaInit
</UL>

<P><STRONG><a name="[89]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
</UL>

<P><STRONG><a name="[e4]"></a>ProcessKey</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, user.o(i.ProcessKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ProcessKey &rArr; StepMotStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStop2
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStop1
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKey
</UL>

<P><STRONG><a name="[83]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[7a]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpio
</UL>

<P><STRONG><a name="[fc]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SendText_UART1</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart.o(i.SendText_UART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SendText_UART1 &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[92]"></a>SoftReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, jump.o(i.SoftReset))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand1
</UL>

<P><STRONG><a name="[ea]"></a>StepMotInit</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, stepmotor.o(i.StepMotInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StepMotInit &rArr; Init_Tim3 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
</UL>

<P><STRONG><a name="[a0]"></a>StepMotRun1</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotRun1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotRun1
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>

<P><STRONG><a name="[a1]"></a>StepMotRun2</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotRun2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotRun2
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>

<P><STRONG><a name="[a2]"></a>StepMotRun3</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotRun3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotRun3
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>

<P><STRONG><a name="[a3]"></a>StepMotRun4</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotRun4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotRun4
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>

<P><STRONG><a name="[a4]"></a>StepMotRun5</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotRun5))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotRun5
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>

<P><STRONG><a name="[a5]"></a>StepMotRun6</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotRun6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotRun6
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>

<P><STRONG><a name="[e5]"></a>StepMotStop1</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stepmotor.o(i.StepMotStop1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotStop1
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>

<P><STRONG><a name="[e6]"></a>StepMotStop2</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stepmotor.o(i.StepMotStop2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>

<P><STRONG><a name="[eb]"></a>StepMoterPulseHandler</STRONG> (Thumb, 674 bytes, Stack size 8 bytes, stepmotor.o(i.StepMoterPulseHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMoterPulseHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMoterPulseHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[ec]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>TIM_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[85]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[84]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[3e]"></a>TaskHeat</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, user.o(i.TaskHeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = TaskHeat &rArr; PID_Calc &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[39]"></a>TaskInput1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, user.o(i.TaskInput1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = TaskInput1 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[38]"></a>TaskKey</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, user.o(i.TaskKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = TaskKey &rArr; ProcessKey &rArr; StepMotStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[3b]"></a>TaskModbus</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, user.o(i.TaskModbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = TaskModbus &rArr; GetModbusPark &rArr; ModbusRecvProcess &rArr; _ModbusParameterProcess &rArr; ModbusWriteWord &rArr; _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusTimeHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModbusPark
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAdrressKey
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[36]"></a>TaskRecv</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, user.o(i.TaskRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = TaskRecv &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[3f]"></a>TaskStatus</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, user.o(i.TaskStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = TaskStatus &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[3c]"></a>TaskStepMotor</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, user.o(i.TaskStepMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = TaskStepMotor &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[3d]"></a>TaskTimePr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, user.o(i.TaskTimePr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = TaskTimePr &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[37]"></a>TaskTs</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, user.o(i.TaskTs))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = TaskTs &rArr; CHECK_AD590OneTCCheckUseADS8328 &rArr; ADS8328_DataConvert &rArr; ADS8328_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_SelectChannel
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_SelectChannel
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_AD590OneTCCheckUseADS8328
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[3a]"></a>TaskVirPwm</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, user.o(i.TaskVirPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = TaskVirPwm &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualPwmOutPin
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; USART1_RxTxISRHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>USART1_RxTxISRHandler</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, hd_159.o(i.USART1_RxTxISRHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = USART1_RxTxISRHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoopbuf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLoopBuf
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRxISRHandler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>USART1_TxIntEn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hd_159.o(i.USART1_TxIntEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_TxIntEn &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
</UL>

<P><STRONG><a name="[2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[7d]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
</UL>

<P><STRONG><a name="[f5]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[81]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TxIntEn
</UL>

<P><STRONG><a name="[7c]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
</UL>

<P><STRONG><a name="[f6]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[fb]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
</UL>

<P><STRONG><a name="[7f]"></a>Uart1BufInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uart.o(i.Uart1BufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Uart1BufInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLoopBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
</UL>

<P><STRONG><a name="[e7]"></a>Uart1CharSend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, uart.o(i.Uart1CharSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoopbuf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLoopBuf
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendText_UART1
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringUartx
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>VirtualPwmOutPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, user.o(i.VirtualPwmOutPin))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskVirPwm
</UL>

<P><STRONG><a name="[98]"></a>_MakeReadRegRespone</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, modbusprocess.o(i._MakeReadRegRespone))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadWord
</UL>

<P><STRONG><a name="[9f]"></a>_MakeWriteRegRespone</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, modbusprocess.o(i._MakeWriteRegRespone))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteWord
</UL>

<P><STRONG><a name="[9c]"></a>_ModbusParameterProcess</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, modbusprocess.o(i._ModbusParameterProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _ModbusParameterProcess &rArr; ModbusWriteWord &rArr; _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand2
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusWriteBit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusReadBit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteWord
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRecvProcess
</UL>

<P><STRONG><a name="[fd]"></a>_ModbusReadBit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, modbusprocess.o(i._ModbusReadBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ModbusReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
</UL>

<P><STRONG><a name="[fe]"></a>_ModbusWriteBit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, modbusprocess.o(i._ModbusWriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ModbusWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
</UL>

<P><STRONG><a name="[9e]"></a>_PlaceModbusFloat</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, modbusprocess.o(i._PlaceModbusFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _PlaceModbusFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteWord
</UL>

<P><STRONG><a name="[99]"></a>_SendModbusPark</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, modbusprocess.o(i._SendModbusPark))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringUartx
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC_Checksum4
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteWord
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadWord
</UL>

<P><STRONG><a name="[9a]"></a>_SendStringUartx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, modbusprocess.o(i._SendStringUartx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendModbusPark
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRecvProcess
</UL>

<P><STRONG><a name="[114]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[115]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[116]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5d]"></a>delay_us</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ads8328.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_DataConvert
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_ReadWord
</UL>

<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[67]"></a>App_TaskCreate</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.App_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = App_TaskCreate &rArr; App_BlinkTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[43]"></a>App_TaskStart</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, main.o(i.App_TaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = App_TaskStart &rArr; App_TaskCreate &rArr; App_BlinkTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendText_UART1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpio
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[69]"></a>GPIO_Configuration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.GPIO_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[35]"></a>MyTASK</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, soft.o(i.MyTASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = MyTASK &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[34]"></a>uctsk_Blink</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, soft.o(i.uctsk_Blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = uctsk_Blink &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[e8]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e9]"></a>SetSysClockTo72</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[ae]"></a>OS_InitEventList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[ab]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[ac]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[ad]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b2]"></a>OS_InitTaskIdle</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b3]"></a>OS_InitTaskStat</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b8]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d6]"></a>OSTmr_InitTask</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_tmr.o(i.OSTmr_InitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[d8]"></a>OSTmr_Link</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_tmr.o(i.OSTmr_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[40]"></a>OSTmr_Task</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OSTmr_InitTask)
</UL>
<P><STRONG><a name="[d7]"></a>OSTmr_Unlink</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_tmr.o(i.OSTmr_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

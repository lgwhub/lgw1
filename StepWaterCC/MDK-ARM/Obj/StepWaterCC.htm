<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\StepWaterCC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\StepWaterCC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Mon Mar 06 11:07:15 2017
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d0b94c]">OS_CPU_SR_Save</a>
 <LI><a href="#[d0b988]">OS_CPU_SR_Restore</a>
 <LI><a href="#[1906850]">OSStartHighRdy</a>
 <LI><a href="#[1906814]">OSCtxSw</a>
 <LI><a href="#[19067d8]">OSIntCtxSw</a>
 <LI><a href="#[190679c]">PendSV_Handler</a>
 <LI><a href="#[d0ca68]">CPU_IntDis</a>
 <LI><a href="#[192f284]">CPU_IntEn</a>
 <LI><a href="#[1772e3c]">CPU_SR_Save</a>
 <LI><a href="#[1772e78]">CPU_SR_Restore</a>
 <LI><a href="#[192f248]">CPU_CntLeadZeros</a>
 <LI><a href="#[192f3b0]">CPU_RevBits</a>
 <LI><a href="#[192f20c]">CPU_WaitForInt</a>
 <LI><a href="#[192f1d0]">CPU_WaitForExcept</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[190a5f4]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[190a5f4]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[1e31a48]">_float_round</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e31a48]">_float_round</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[190a84c]">Reset_Handler</a>
 <LI><a href="#[d07ef0]">NMI_Handler</a>
 <LI><a href="#[d07f68]">HardFault_Handler</a>
 <LI><a href="#[d07f2c]">MemManage_Handler</a>
 <LI><a href="#[d07fe0]">BusFault_Handler</a>
 <LI><a href="#[d07cd4]">UsageFault_Handler</a>
 <LI><a href="#[d07eb4]">SVC_Handler</a>
 <LI><a href="#[d07fa4]">DebugMon_Handler</a>
 <LI><a href="#[190679c]">PendSV_Handler</a>
 <LI><a href="#[d07e78]">SysTick_Handler</a>
 <LI><a href="#[1909d48]">WWDG_IRQHandler</a>
 <LI><a href="#[190a144]">PVD_IRQHandler</a>
 <LI><a href="#[190a018]">TAMPER_IRQHandler</a>
 <LI><a href="#[190a090]">RTC_IRQHandler</a>
 <LI><a href="#[190a1f8]">FLASH_IRQHandler</a>
 <LI><a href="#[190a108]">RCC_IRQHandler</a>
 <LI><a href="#[190a39c]">EXTI0_IRQHandler</a>
 <LI><a href="#[190a324]">EXTI1_IRQHandler</a>
 <LI><a href="#[190a2e8]">EXTI2_IRQHandler</a>
 <LI><a href="#[190a2ac]">EXTI3_IRQHandler</a>
 <LI><a href="#[190a270]">EXTI4_IRQHandler</a>
 <LI><a href="#[190a540]">DMA1_Channel1_IRQHandler</a>
 <LI><a href="#[190a504]">DMA1_Channel2_IRQHandler</a>
 <LI><a href="#[190a4c8]">DMA1_Channel3_IRQHandler</a>
 <LI><a href="#[190a48c]">DMA1_Channel4_IRQHandler</a>
 <LI><a href="#[190a450]">DMA1_Channel5_IRQHandler</a>
 <LI><a href="#[190a414]">DMA1_Channel6_IRQHandler</a>
 <LI><a href="#[190a3d8]">DMA1_Channel7_IRQHandler</a>
 <LI><a href="#[190a5f4]">ADC1_2_IRQHandler</a>
 <LI><a href="#[1909dc0]">USB_HP_CAN1_TX_IRQHandler</a>
 <LI><a href="#[1909d84]">USB_LP_CAN1_RX0_IRQHandler</a>
 <LI><a href="#[190a5b8]">CAN1_RX1_IRQHandler</a>
 <LI><a href="#[190a57c]">CAN1_SCE_IRQHandler</a>
 <LI><a href="#[190a234]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[1909fdc]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[1909f28]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[1909f64]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[1909fa0]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[1909eec]">TIM2_IRQHandler</a>
 <LI><a href="#[d07e3c]">TIM3_IRQHandler</a>
 <LI><a href="#[190a180]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[190a1bc]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[190a054]">SPI1_IRQHandler</a>
 <LI><a href="#[d07d88]">USART1_IRQHandler</a>
 <LI><a href="#[d07d4c]">USART2_IRQHandler</a>
 <LI><a href="#[190a360]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[190a0cc]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[1909dfc]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[d0cae0]">main</a>
 <LI><a href="#[190ac0c]">SystemInit</a>
 <LI><a href="#[1e330c8]">__main</a>
 <LI><a href="#[1906c10]">OSTaskSwHook</a>
 <LI><a href="#[d06fb4]">uctsk_Blink</a>
 <LI><a href="#[d06ff0]">MyTASK</a>
 <LI><a href="#[d06bf4]">TaskRecv</a>
 <LI><a href="#[d06b04]">TaskTs</a>
 <LI><a href="#[d06c6c]">TaskKey</a>
 <LI><a href="#[d06ca8]">TaskInput1</a>
 <LI><a href="#[d06ac8]">TaskVirPwm</a>
 <LI><a href="#[d06c30]">TaskModbus</a>
 <LI><a href="#[d06b7c]">TaskStepMotor</a>
 <LI><a href="#[d06b40]">TaskTimePr</a>
 <LI><a href="#[d06ce4]">TaskHeat</a>
 <LI><a href="#[d06bb8]">TaskStatus</a>
 <LI><a href="#[1931408]">OSTmr_Task</a>
 <LI><a href="#[1902638]">OS_TaskIdle</a>
 <LI><a href="#[19025fc]">OS_TaskStat</a>
 <LI><a href="#[d0cdb0]">App_TaskStart</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1e330c8]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(.text)
</UL>
<P><STRONG><a name="[1e320d8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1e31fac]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1e31868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1e31f70]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1e31868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1e31e80]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[190b710]"></a>__get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[190b6d4]"></a>__set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[190b698]"></a>__get_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[1777180]"></a>__set_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1777360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpAppAdr
</UL>

<P><STRONG><a name="[190b65c]"></a>__REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[190b620]"></a>__REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[190a84c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a5f4]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[190a5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[190a5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a5b8]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a57c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a540]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a504]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a4c8]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a48c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a450]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a414]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a3d8]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a39c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a360]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a324]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a2e8]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a2ac]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a270]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a234]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a1f8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a1bc]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a180]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a144]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a108]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a0cc]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a090]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a054]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190a018]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1909fdc]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1909fa0]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1909f64]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1909f28]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1909eec]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1909dfc]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1909dc0]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1909d84]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1909d48]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[d0b94c]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d06d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d06e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[d07c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[d07c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d07e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d0bab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[d0baf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1BufInit
<LI><a href="#[d0c84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d0c888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d0c8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[177b500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[177b53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1902548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1902584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[19025fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[1902638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[1902674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[19026ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1902980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[19029bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1902a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[d0b988]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d06d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d06e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[d07c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[d07c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d07e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d0bab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[d0baf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1BufInit
<LI><a href="#[d0c84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d0c888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d0c8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[177b500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[177b53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1902548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1902584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[19025fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[1902638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[1902674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[19026ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1902980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[19029bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1902a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[1906850]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0c900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[1906814]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19026ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[19067d8]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d07c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[190679c]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[d0ca68]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0cae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192f284]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1772e3c]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[1772e78]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[192f248]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[192f3b0]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[192f20c]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[192f1d0]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[177b230]"></a>__aeabi_fadd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_fadd &rArr; _float_addcore &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1e32ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[177b488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[177b4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
<LI><a href="#[177ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_AD590OneTCCheckUseADS8328
</UL>

<P><STRONG><a name="[177b17c]"></a>__aeabi_fsub</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_fsub &rArr; _float_addcore &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1e32ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
<LI><a href="#[d06ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeat
<LI><a href="#[177b488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[177b4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
</UL>

<P><STRONG><a name="[1778ddc]"></a>__aeabi_frsub</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_frsub &rArr; _float_addcore &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1e32ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[177b488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
</UL>

<P><STRONG><a name="[177b1b8]"></a>__aeabi_fmul</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[17780bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Para_Refush
<LI><a href="#[177b488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[177b4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
<LI><a href="#[177ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_AD590OneTCCheckUseADS8328
</UL>

<P><STRONG><a name="[177b1f4]"></a>__aeabi_fdiv</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_fdiv &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1e32b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[17780bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Para_Refush
<LI><a href="#[177ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_AD590OneTCCheckUseADS8328
</UL>

<P><STRONG><a name="[177b2e4]"></a>__aeabi_dadd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e328d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
</UL>

<P><STRONG><a name="[177b2a8]"></a>__aeabi_dsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __aeabi_dsub &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e328d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
</UL>

<P><STRONG><a name="[1e32894]"></a>__aeabi_drsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e328d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[192bbac]"></a>__aeabi_dmul</STRONG> (Thumb, 232 bytes, Stack size 88 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e327e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[177b6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
</UL>

<P><STRONG><a name="[177b140]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1e32b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[177ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_AD590OneTCCheckUseADS8328
</UL>

<P><STRONG><a name="[192bb70]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e327e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[177b6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
</UL>

<P><STRONG><a name="[1778e18]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177b488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[177b4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
</UL>

<P><STRONG><a name="[177b26c]"></a>__aeabi_f2d</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d06b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
</UL>

<P><STRONG><a name="[177b320]"></a>__aeabi_d2f</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1e32b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
<LI><a href="#[177b6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
</UL>

<P><STRONG><a name="[1778044]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17780bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Para_Refush
</UL>

<P><STRONG><a name="[1778e54]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177b488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[177b4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
</UL>

<P><STRONG><a name="[177b35c]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d06b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
<LI><a href="#[177b488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[177b4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
</UL>

<P><STRONG><a name="[1e31d54]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e328d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1e31d18]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1e31c28]"></a>__aeabi_llsr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e328d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1e31bec]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1e31b38]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1e31a48]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e31a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1e31a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[1e32b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>

<P><STRONG><a name="[1e32b28]"></a>_float_epilogue</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1e31a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[177b140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[177b1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[177b320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1e32ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[1e31958]"></a>_double_round</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1e327e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1e327e0]"></a>_double_epilogue</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e31958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[192bb70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[192bbac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e328d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1e31868]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e31f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1e31fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1e3182c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1e31340]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e31304]"></a>__decompress1</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[177b794]"></a>ADS8328_DataConvert</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, ads8328.o(i.ADS8328_DataConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADS8328_DataConvert &rArr; ADS8328_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[17796c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[177973c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_ReadWord
<LI><a href="#[177b668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[177ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_AD590OneTCCheckUseADS8328
</UL>

<P><STRONG><a name="[177b758]"></a>ADS8328_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ads8328.o(i.ADS8328_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADS8328_Init &rArr; ADS8328_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[17796c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1779700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTs
</UL>

<P><STRONG><a name="[177973c]"></a>ADS8328_ReadWord</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ads8328.o(i.ADS8328_ReadWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADS8328_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[17796c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[177b668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[177b794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_DataConvert
</UL>

<P><STRONG><a name="[177b71c]"></a>ADS8328_SelectChannel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ads8328.o(i.ADS8328_SelectChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADS8328_SelectChannel &rArr; ADS8328_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[1779700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTs
</UL>

<P><STRONG><a name="[1779700]"></a>ADS8328_WriteWord</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ads8328.o(i.ADS8328_WriteWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADS8328_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[177b71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_SelectChannel
<LI><a href="#[177b758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_Init
</UL>

<P><STRONG><a name="[d0ba78]"></a>AddLoopBuf</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, loopbuf.o(i.AddLoopBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AddLoopBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[d0bab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
</UL>

<P><STRONG><a name="[d0caa4]"></a>App_BlinkTaskCreate</STRONG> (Thumb, 554 bytes, Stack size 32 bytes, soft.o(i.App_BlinkTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = App_BlinkTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d06d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d06e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[d0c84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d0c888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[d0cdec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreate
</UL>

<P><STRONG><a name="[1906b20]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[1906d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[1906ae4]"></a>App_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[1906d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[1906a6c]"></a>App_TaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[1906cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[1906a30]"></a>App_TaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[1906c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[19069f4]"></a>App_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskSwHook))
<BR><BR>[Called By]<UL><LI><a href="#[1906c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[19069b8]"></a>App_TimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[1906bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[17772ac]"></a>BKP_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_bkp.o(i.BKP_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d0c9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
</UL>

<P><STRONG><a name="[1777270]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_bkp.o(i.BKP_ReadBackupRegister))
<BR><BR>[Called By]<UL><LI><a href="#[d0c9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
</UL>

<P><STRONG><a name="[1777234]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(i.BKP_WriteBackupRegister))
<BR><BR>[Called By]<UL><LI><a href="#[d0c9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
<LI><a href="#[177739c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkWrite
</UL>

<P><STRONG><a name="[d07fe0]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[177ba28]"></a>CHECK_AD590OneTCCheckUseADS8328</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, user.o(i.CHECK_AD590OneTCCheckUseADS8328))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CHECK_AD590OneTCCheckUseADS8328 &rArr; ADS8328_DataConvert &rArr; ADS8328_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[177b140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[177b1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[177b1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[177b230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[177b794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_DataConvert
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTs
</UL>

<P><STRONG><a name="[177b9ec]"></a>CHECK_SelectChannel</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, user.o(i.CHECK_SelectChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CHECK_SelectChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTs
</UL>

<P><STRONG><a name="[177b9b0]"></a>CheckAdrressKey</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, user.o(i.CheckAdrressKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckAdrressKey
</UL>
<BR>[Calls]<UL><LI><a href="#[177b668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[d06c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskModbus
</UL>

<P><STRONG><a name="[d0ba3c]"></a>ClearLoopBuf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loopbuf.o(i.ClearLoopBuf))
<BR><BR>[Called By]<UL><LI><a href="#[d0baf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1BufInit
<LI><a href="#[177b6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
</UL>

<P><STRONG><a name="[d07fa4]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[177b6a4]"></a>Default_ParamInit</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, parameter.o(i.Default_ParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Default_ParamInit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d0ba3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLoopBuf
<LI><a href="#[17780f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ParaInit
<LI><a href="#[1778134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_BufInit
<LI><a href="#[177b320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[192bb70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[192bbac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d06c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskModbus
</UL>

<P><STRONG><a name="[1772e00]"></a>GPIO_Init</STRONG> (Thumb, 268 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0ca2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpio
</UL>

<P><STRONG><a name="[177b668]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[177973c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_ReadWord
<LI><a href="#[177b794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_DataConvert
<LI><a href="#[177b9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAdrressKey
</UL>

<P><STRONG><a name="[d0d530]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d06bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStatus
<LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[d0bab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[d0d56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMoterPulseHandler
<LI><a href="#[d0d5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStop2
<LI><a href="#[d0d5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStop1
<LI><a href="#[d0d620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun6
<LI><a href="#[d0d65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun5
<LI><a href="#[d0d698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun4
<LI><a href="#[d0d6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun3
<LI><a href="#[d0d710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun2
<LI><a href="#[d0d74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun1
<LI><a href="#[d0d788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotInit
<LI><a href="#[1779700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_WriteWord
<LI><a href="#[177973c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_ReadWord
<LI><a href="#[177b794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_DataConvert
<LI><a href="#[177b7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualPwmOutPin
<LI><a href="#[177b9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_SelectChannel
</UL>

<P><STRONG><a name="[d0d4f4]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d06bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStatus
<LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[d0d56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMoterPulseHandler
<LI><a href="#[d0d620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun6
<LI><a href="#[d0d65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun5
<LI><a href="#[d0d698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun4
<LI><a href="#[d0d6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun3
<LI><a href="#[d0d710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun2
<LI><a href="#[d0d74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun1
<LI><a href="#[1779700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_WriteWord
<LI><a href="#[177973c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_ReadWord
<LI><a href="#[177b794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_DataConvert
<LI><a href="#[177b7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualPwmOutPin
<LI><a href="#[177b9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_SelectChannel
</UL>

<P><STRONG><a name="[1e33e60]"></a>GetCRC_Checksum4</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, modbusprocess.o(i.GetCRC_Checksum4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetCRC_Checksum4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e33b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendModbusPark
<LI><a href="#[1e33de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRecvProcess
</UL>

<P><STRONG><a name="[d0ba00]"></a>GetLoopbuf</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, loopbuf.o(i.GetLoopbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetLoopbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[d0bab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
</UL>

<P><STRONG><a name="[177b62c]"></a>GetModbusPark</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, modbusrecv.o(i.GetModbusPark))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GetModbusPark &rArr; ModbusRecvProcess &rArr; _ModbusParameterProcess &rArr; ModbusWriteWord &rArr; _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e33de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRecvProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[d06c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskModbus
</UL>

<P><STRONG><a name="[d07f68]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[d0ca2c]"></a>InitGpio</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, hd_159.o(i.InitGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = InitGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1772d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1772e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0cdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[d0c9f0]"></a>InitUSART1</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, hd_159.o(i.InitUSART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = InitUSART1 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d0baf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1BufInit
<LI><a href="#[1772b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1772be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1772d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1772d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1772eb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TxIntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[d0cdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[d0d4b8]"></a>Init_Tim3</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, hd_159.o(i.Init_Tim3))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_Tim3 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1772c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1772c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[1772cd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1772d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1772d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[17771bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d0d788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotInit
</UL>

<P><STRONG><a name="[d0c9b4]"></a>IspMarkLoad</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, jump.o(i.IspMarkLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IspMarkLoad &rArr; JumpAppAdr
</UL>
<BR>[Calls]<UL><LI><a href="#[17771bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[17771f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[1777234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[1777270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[17772ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ClearFlag
<LI><a href="#[1777360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpAppAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0cae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177739c]"></a>IspMarkWrite</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jump.o(i.IspMarkWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IspMarkWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1777234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1777324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand1
</UL>

<P><STRONG><a name="[1777360]"></a>JumpAppAdr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, jump.o(i.JumpAppAdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JumpAppAdr
</UL>
<BR>[Calls]<UL><LI><a href="#[1777180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
</UL>

<P><STRONG><a name="[d07f2c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1777324]"></a>ModbusCommand1</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, jump.o(i.ModbusCommand1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ModbusCommand1 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[17772e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[177739c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1e33cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
</UL>

<P><STRONG><a name="[177b974]"></a>ModbusCommand2</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, user.o(i.ModbusCommand2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ModbusCommand2 &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[177b500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[177b53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[177b938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>
<BR>[Called By]<UL><LI><a href="#[1e33cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
</UL>

<P><STRONG><a name="[177b5b4]"></a>ModbusInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, modbusrecv.o(i.ModbusInit))
<BR><BR>[Called By]<UL><LI><a href="#[d06c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskModbus
</UL>

<P><STRONG><a name="[1e33e24]"></a>ModbusReadWord</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, modbusprocess.o(i.ModbusReadWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ModbusReadWord &rArr; _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e33b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendModbusPark
<LI><a href="#[1e33d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakeReadRegRespone
</UL>
<BR>[Called By]<UL><LI><a href="#[1e33cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
</UL>

<P><STRONG><a name="[1e33de8]"></a>ModbusRecvProcess</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, modbusprocess.o(i.ModbusRecvProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ModbusRecvProcess &rArr; _ModbusParameterProcess &rArr; ModbusWriteWord &rArr; _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e33b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringUartx
<LI><a href="#[1e33cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
<LI><a href="#[1e33e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC_Checksum4
</UL>
<BR>[Called By]<UL><LI><a href="#[177b62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModbusPark
</UL>

<P><STRONG><a name="[1772dc4]"></a>ModbusRxISRHandler</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, modbusrecv.o(i.ModbusRxISRHandler))
<BR><BR>[Called By]<UL><LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[177b578]"></a>ModbusTimeHandler</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, modbusrecv.o(i.ModbusTimeHandler))
<BR><BR>[Called By]<UL><LI><a href="#[d06c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskModbus
</UL>

<P><STRONG><a name="[1e33dac]"></a>ModbusWriteWord</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, modbusprocess.o(i.ModbusWriteWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ModbusWriteWord &rArr; _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e33b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendModbusPark
<LI><a href="#[1e33bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PlaceModbusFloat
<LI><a href="#[1e33d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakeWriteRegRespone
</UL>
<BR>[Called By]<UL><LI><a href="#[1e33cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
</UL>

<P><STRONG><a name="[177b938]"></a>MotorsRun</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, user.o(i.MotorsRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MotorsRun &rArr; StepMotRun6
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun6
<LI><a href="#[d0d65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun5
<LI><a href="#[d0d698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun4
<LI><a href="#[d0d6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun3
<LI><a href="#[d0d710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun2
<LI><a href="#[d0d74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotRun1
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
<LI><a href="#[177b974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand2
</UL>

<P><STRONG><a name="[d07ef0]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1772d88]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
<LI><a href="#[d0d4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[d0c978]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d0cdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[19086c8]"></a>OSDebugInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_dbg.o(i.OSDebugInit))
<BR><BR>[Called By]<UL><LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1902a70]"></a>OSEventNameSet</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_core.o(i.OSEventNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[190250c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[d0c93c]"></a>OSInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1902458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[1902494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[19024d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[190250c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[19034fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[1903538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[1903574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[19035b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[19035ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[1903628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[1906db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[1906df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[19086c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0cae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1906df0]"></a>OSInitHookBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1906db4]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d07c98]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19034c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[19067d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[d07e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[19029bc]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1931408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[1902980]"></a>OSSchedUnlock</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19026ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1931408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[d06e10]"></a>OSSemCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19027a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
<LI><a href="#[d0caa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
<LI><a href="#[190250c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[177b53c]"></a>OSSemPend</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19026ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1902818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[1902890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
<LI><a href="#[d06ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeat
<LI><a href="#[177b974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand2
<LI><a href="#[1931408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[177b500]"></a>OSSemPost</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19026ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[19028cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTimePr
<LI><a href="#[d06b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
<LI><a href="#[177b974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand2
<LI><a href="#[190697c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[d0c900]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[19034c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[1906850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0cae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0c8c4]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(i.OSStatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[d0cdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[1906d78]"></a>OSTCBInitHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1906b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1902674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[d06d20]"></a>OSTaskCreate</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1902674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[19026ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1906c4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0caa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
</UL>

<P><STRONG><a name="[d0c888]"></a>OSTaskCreateExt</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1902674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[19026ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1906c4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[19333ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0caa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
<LI><a href="#[d0cae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19034fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[1903538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[1931480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[1906d3c]"></a>OSTaskCreateHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1906ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1902674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1906cc4]"></a>OSTaskIdleHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1906a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1902638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[d0c84c]"></a>OSTaskNameSet</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d0caa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
<LI><a href="#[d0cae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19034fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[1903538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[1931480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[1906c88]"></a>OSTaskStatHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStatHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1906a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[19025fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1902584]"></a>OSTaskStkChk</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[19025c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[1906c4c]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d06d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d0c888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[1902548]"></a>OSTaskSuspend</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19026ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[19025fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1906c10]"></a>OSTaskSwHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[19069f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[d0b9c4]"></a>OSTimeDly</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19026ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[d06ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskVirPwm
<LI><a href="#[d06b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTs
<LI><a href="#[d06b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskTimePr
<LI><a href="#[d06b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
<LI><a href="#[d06bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStatus
<LI><a href="#[d06bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRecv
<LI><a href="#[d06c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskModbus
<LI><a href="#[d06c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKey
<LI><a href="#[d06ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskInput1
<LI><a href="#[d06ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeat
<LI><a href="#[d0bab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[d0c810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[d0c8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[1777324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand1
<LI><a href="#[19025fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[d0c810]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[d06fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Blink
<LI><a href="#[d06ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTASK
<LI><a href="#[d0cdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[d07c20]"></a>OSTimeTick</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1906bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[d07e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1906bd4]"></a>OSTimeTickHook</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[190697c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
<LI><a href="#[19069b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[d07c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[190697c]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmrSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[177b500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1906bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[190250c]"></a>OSTmr_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, os_tmr.o(i.OSTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d06e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1902764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[1902a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[1931480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d0c7d4]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, os_cpu_c.o(i.OS_CPU_SysTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[d0cdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[19028cc]"></a>OS_EventTaskRdy</STRONG> (Thumb, 150 bytes, Stack size 36 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1902854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[1902890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[177b500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[1902890]"></a>OS_EventTaskRemove</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[177b53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[19028cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[1902854]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, os_core.o(i.OS_EventTaskRemoveMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[19028cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[1902818]"></a>OS_EventTaskWait</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[177b53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[19027a0]"></a>OS_EventWaitListInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[d06e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[19024d0]"></a>OS_FlagInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1902764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1902764]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[1902458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[1902494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[19024d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[190250c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[1903574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[1903628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[1902494]"></a>OS_MemInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1902764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1902458]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1902764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[19026ec]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19034c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[1906814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[d06d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d0c888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[177b500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[177b53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1902548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1902980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[1902674]"></a>OS_TCBInit</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1906d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[1906d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[d06d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d0c888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[1902638]"></a>OS_TaskIdle</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_TaskIdle &rArr; OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1906cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[19025fc]"></a>OS_TaskStat</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1902548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[19025c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[1906c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[19025c0]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[1902584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[19025fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[19333ac]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[d0c888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[1778134]"></a>PID_BufInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pid.o(i.PID_BufInit))
<BR><BR>[Called By]<UL><LI><a href="#[177b6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
</UL>

<P><STRONG><a name="[177b4c4]"></a>PID_Calc</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, pid.o(i.PID_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PID_Calc &rArr; __aeabi_fsub &rArr; _float_addcore &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1778e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1778e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[177b17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[177b1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[177b230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[177b35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d06ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeat
</UL>

<P><STRONG><a name="[177b488]"></a>PID_Inc_Calc</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, pid_inc.o(i.PID_Inc_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PID_Inc_Calc &rArr; __aeabi_frsub &rArr; _float_addcore &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1778ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1778e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1778e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[177b17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[177b1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[177b230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[177b35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
</UL>

<P><STRONG><a name="[17780f8]"></a>PID_ParaInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pid.o(i.PID_ParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PID_ParaInit &rArr; PID_Para_Refush_All &rArr; PID_Para_Refush &rArr; __aeabi_fdiv &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1778080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Para_Refush_All
</UL>
<BR>[Called By]<UL><LI><a href="#[177b6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
</UL>

<P><STRONG><a name="[17780bc]"></a>PID_Para_Refush</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, pid.o(i.PID_Para_Refush))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PID_Para_Refush &rArr; __aeabi_fdiv &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1778044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[177b1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[177b1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1778080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Para_Refush_All
</UL>

<P><STRONG><a name="[1778080]"></a>PID_Para_Refush_All</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pid.o(i.PID_Para_Refush_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PID_Para_Refush_All &rArr; PID_Para_Refush &rArr; __aeabi_fdiv &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[17780bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Para_Refush
</UL>
<BR>[Called By]<UL><LI><a href="#[17780f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ParaInit
<LI><a href="#[1e33cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
</UL>

<P><STRONG><a name="[17771f8]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d0c9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
</UL>

<P><STRONG><a name="[177b8fc]"></a>ProcessKey</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, user.o(i.ProcessKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ProcessKey &rArr; StepMotStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStop2
<LI><a href="#[d0d5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotStop1
</UL>
<BR>[Called By]<UL><LI><a href="#[d06c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKey
</UL>

<P><STRONG><a name="[17771bc]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d0c9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
<LI><a href="#[d0d4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[1772d4c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d0c9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
<LI><a href="#[d0ca2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpio
</UL>

<P><STRONG><a name="[17e4108]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 374 bytes, Stack size 20 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1772b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[d07eb4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[d0c798]"></a>SendText_UART1</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart.o(i.SendText_UART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SendText_UART1 &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0bab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
</UL>
<BR>[Called By]<UL><LI><a href="#[d0cdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[17772e8]"></a>SoftReset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, jump.o(i.SoftReset))
<BR><BR>[Called By]<UL><LI><a href="#[1777324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand1
</UL>

<P><STRONG><a name="[d0d788]"></a>StepMotInit</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, stepmotor.o(i.StepMotInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StepMotInit &rArr; Init_Tim3 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d06b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepMotor
</UL>

<P><STRONG><a name="[d0d74c]"></a>StepMotRun1</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotRun1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotRun1
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[177b938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>

<P><STRONG><a name="[d0d710]"></a>StepMotRun2</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotRun2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotRun2
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[177b938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>

<P><STRONG><a name="[d0d6d4]"></a>StepMotRun3</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotRun3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotRun3
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[177b938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>

<P><STRONG><a name="[d0d698]"></a>StepMotRun4</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotRun4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotRun4
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[177b938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>

<P><STRONG><a name="[d0d65c]"></a>StepMotRun5</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotRun5))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotRun5
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[177b938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>

<P><STRONG><a name="[d0d620]"></a>StepMotRun6</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotRun6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StepMotRun6
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[177b938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>

<P><STRONG><a name="[d0d5e4]"></a>StepMotStop1</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stepmotor.o(i.StepMotStop1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotStop1
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[177b8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>

<P><STRONG><a name="[d0d5a8]"></a>StepMotStop2</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stepmotor.o(i.StepMotStop2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMotStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[177b8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>

<P><STRONG><a name="[d0d56c]"></a>StepMoterPulseHandler</STRONG> (Thumb, 696 bytes, Stack size 8 bytes, stepmotor.o(i.StepMoterPulseHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepMoterPulseHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d07e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[d07e78]"></a>SysTick_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[d07c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[d07c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[190ac0c]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[190af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(.text)
</UL>
<P><STRONG><a name="[d07e3c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d07ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[d07be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[d0d56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMoterPulseHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[d07be4]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[d07e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1772d10]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d0d4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[d07ba8]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d07e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1772cd4]"></a>TIM_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d0d4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[1772c98]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[d0d4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[1772c5c]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[d0d4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tim3
</UL>

<P><STRONG><a name="[d06ce4]"></a>TaskHeat</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, user.o(i.TaskHeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TaskHeat &rArr; PID_Calc &rArr; __aeabi_fsub &rArr; _float_addcore &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[177b17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[177b4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
<LI><a href="#[177b53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[d06ca8]"></a>TaskInput1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, user.o(i.TaskInput1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TaskInput1 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[d06c6c]"></a>TaskKey</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, user.o(i.TaskKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = TaskKey &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[177b8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[d06c30]"></a>TaskModbus</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, user.o(i.TaskModbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TaskModbus &rArr; GetModbusPark &rArr; ModbusRecvProcess &rArr; _ModbusParameterProcess &rArr; ModbusWriteWord &rArr; _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[177b578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusTimeHandler
<LI><a href="#[177b5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusInit
<LI><a href="#[177b62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModbusPark
<LI><a href="#[177b6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_ParamInit
<LI><a href="#[177b9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAdrressKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[d06bf4]"></a>TaskRecv</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, user.o(i.TaskRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TaskRecv &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[d06bb8]"></a>TaskStatus</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, user.o(i.TaskStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = TaskStatus &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[d06b7c]"></a>TaskStepMotor</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, user.o(i.TaskStepMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = TaskStepMotor &rArr; __aeabi_dsub &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d06e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d0d788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotInit
<LI><a href="#[177b17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[177b26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[177b2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[177b2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[177b320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[177b35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[177b488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Inc_Calc
<LI><a href="#[177b500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[177b53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[177b938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsRun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[d06b40]"></a>TaskTimePr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, user.o(i.TaskTimePr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = TaskTimePr &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[177b500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[d06b04]"></a>TaskTs</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, user.o(i.TaskTs))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = TaskTs &rArr; CHECK_AD590OneTCCheckUseADS8328 &rArr; ADS8328_DataConvert &rArr; ADS8328_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[177b71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_SelectChannel
<LI><a href="#[177b758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_Init
<LI><a href="#[177b9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_SelectChannel
<LI><a href="#[177ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECK_AD590OneTCCheckUseADS8328
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[d06ac8]"></a>TaskVirPwm</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, user.o(i.TaskVirPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = TaskVirPwm &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[177b7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualPwmOutPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[d07d88]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; USART1_RxTxISRHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[d07b6c]"></a>USART1_RxTxISRHandler</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, hd_159.o(i.USART1_RxTxISRHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = USART1_RxTxISRHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d07c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d0b8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d0b910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d0ba00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoopbuf
<LI><a href="#[d0ba78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLoopBuf
<LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1772b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1772ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1772c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1772dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRxISRHandler
<LI><a href="#[1772e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1772e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d07d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1772eb4]"></a>USART1_TxIntEn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hd_159.o(i.USART1_TxIntEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_TxIntEn &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
</UL>

<P><STRONG><a name="[d07d4c]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1772c20]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[1772be4]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d0c9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
</UL>

<P><STRONG><a name="[1772ba8]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[d0b910]"></a>USART_ITConfig</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[d0bab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
<LI><a href="#[d0c9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
<LI><a href="#[1772eb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TxIntEn
</UL>

<P><STRONG><a name="[1772b6c]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17e4108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
</UL>

<P><STRONG><a name="[1772b30]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
</UL>

<P><STRONG><a name="[d0b8d4]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[d07b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTxISRHandler
<LI><a href="#[d0bab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
</UL>

<P><STRONG><a name="[d0baf0]"></a>Uart1BufInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uart.o(i.Uart1BufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Uart1BufInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d0ba3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLoopBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
</UL>

<P><STRONG><a name="[d0bab4]"></a>Uart1CharSend</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, uart.o(i.Uart1CharSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0b8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d0b910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d0b94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[d0b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d0b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d0ba00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoopbuf
<LI><a href="#[d0ba78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLoopBuf
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendText_UART1
<LI><a href="#[1e33b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringUartx
</UL>

<P><STRONG><a name="[d07cd4]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[177b7d0]"></a>VirtualPwmOutPin</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, user.o(i.VirtualPwmOutPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VirtualPwmOutPin
</UL>
<BR>[Calls]<UL><LI><a href="#[d0d4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d0d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d06ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskVirPwm
</UL>

<P><STRONG><a name="[1e33d70]"></a>_MakeReadRegRespone</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, modbusprocess.o(i._MakeReadRegRespone))
<BR><BR>[Called By]<UL><LI><a href="#[1e33e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadWord
</UL>

<P><STRONG><a name="[1e33d34]"></a>_MakeWriteRegRespone</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, modbusprocess.o(i._MakeWriteRegRespone))
<BR><BR>[Called By]<UL><LI><a href="#[1e33dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteWord
</UL>

<P><STRONG><a name="[1e33cf8]"></a>_ModbusParameterProcess</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, modbusprocess.o(i._ModbusParameterProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _ModbusParameterProcess &rArr; ModbusWriteWord &rArr; _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1777324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand1
<LI><a href="#[1778080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Para_Refush_All
<LI><a href="#[177b974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCommand2
<LI><a href="#[1e33c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusWriteBit
<LI><a href="#[1e33cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusReadBit
<LI><a href="#[1e33dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteWord
<LI><a href="#[1e33e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1e33de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRecvProcess
</UL>

<P><STRONG><a name="[1e33cbc]"></a>_ModbusReadBit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, modbusprocess.o(i._ModbusReadBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ModbusReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e33cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
</UL>

<P><STRONG><a name="[1e33c44]"></a>_ModbusWriteBit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, modbusprocess.o(i._ModbusWriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ModbusWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e33cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ModbusParameterProcess
</UL>

<P><STRONG><a name="[1e33bcc]"></a>_PlaceModbusFloat</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, modbusprocess.o(i._PlaceModbusFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _PlaceModbusFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[1e33dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteWord
</UL>

<P><STRONG><a name="[1e33b90]"></a>_SendModbusPark</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, modbusprocess.o(i._SendModbusPark))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _SendModbusPark &rArr; _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e33b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringUartx
<LI><a href="#[1e33e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC_Checksum4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e33dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteWord
<LI><a href="#[1e33e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadWord
</UL>

<P><STRONG><a name="[1e33b54]"></a>_SendStringUartx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, modbusprocess.o(i._SendStringUartx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _SendStringUartx &rArr; Uart1CharSend &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0bab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CharSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1e33b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendModbusPark
<LI><a href="#[1e33de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRecvProcess
</UL>

<P><STRONG><a name="[1e314a8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1e3146c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1e31430]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[17796c4]"></a>delay_us</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ads8328.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[177973c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_ReadWord
<LI><a href="#[177b758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_Init
<LI><a href="#[177b794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS8328_DataConvert
</UL>

<P><STRONG><a name="[d0cae0]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d0c84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d0c888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d0c900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[d0c9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IspMarkLoad
<LI><a href="#[d0ca68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d0cdec]"></a>App_TaskCreate</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.App_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = App_TaskCreate &rArr; App_BlinkTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d0caa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BlinkTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[d0cdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[d0cdb0]"></a>App_TaskStart</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.App_TaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = App_TaskStart &rArr; App_TaskCreate &rArr; App_BlinkTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d0c798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendText_UART1
<LI><a href="#[d0c7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[d0c810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[d0c8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[d0c978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[d0c9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUSART1
<LI><a href="#[d0ca2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpio
<LI><a href="#[d0cd74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[d0cdec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[d0cd74]"></a>GPIO_Configuration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.GPIO_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[d0cdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[d06ff0]"></a>MyTASK</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, soft.o(i.MyTASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = MyTASK &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0c810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[d06fb4]"></a>uctsk_Blink</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, soft.o(i.uctsk_Blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = uctsk_Blink &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d0c810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft.o(i.App_BlinkTaskCreate)
</UL>
<P><STRONG><a name="[190af18]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[190aedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[190ac0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[190aedc]"></a>SetSysClockTo72</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Called By]<UL><LI><a href="#[190af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1903628]"></a>OS_InitEventList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1902764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[19035ec]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[19035b0]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1903574]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[1902764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1903538]"></a>OS_InitTaskIdle</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d0c84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d0c888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[19034fc]"></a>OS_InitTaskStat</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d0c84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d0c888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[d0c93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[19034c0]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[d07c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d0c900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[19026ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1931480]"></a>OSTmr_InitTask</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, os_tmr.o(i.OSTmr_InitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d0c84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d0c888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[190250c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[1931444]"></a>OSTmr_Link</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, os_tmr.o(i.OSTmr_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[1931408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[1931408]"></a>OSTmr_Task</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, os_tmr.o(i.OSTmr_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[177b53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1902980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[19029bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[19313cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[1931444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OSTmr_InitTask)
</UL>
<P><STRONG><a name="[19313cc]"></a>OSTmr_Unlink</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_tmr.o(i.OSTmr_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[1931408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[1e32ba0]"></a>_float_addcore</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _float_addcore &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1e32b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1778ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[177b17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[177b230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[1e328d0]"></a>_double_addcore</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e31c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1e31d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1e327e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[177b2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[177b2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1e32894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
